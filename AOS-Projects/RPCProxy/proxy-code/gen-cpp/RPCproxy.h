/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RPCproxy_H
#define RPCproxy_H

#include <thrift/TDispatchProcessor.h>
#include "proxy_types.h"

namespace proxy {

class RPCproxyIf {
 public:
  virtual ~RPCproxyIf() {}
  virtual void ping() = 0;
  virtual void getURL(std::string& _return, const std::string& url) = 0;
  virtual void getCacheStats() = 0;
};

class RPCproxyIfFactory {
 public:
  typedef RPCproxyIf Handler;

  virtual ~RPCproxyIfFactory() {}

  virtual RPCproxyIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RPCproxyIf* /* handler */) = 0;
};

class RPCproxyIfSingletonFactory : virtual public RPCproxyIfFactory {
 public:
  RPCproxyIfSingletonFactory(const boost::shared_ptr<RPCproxyIf>& iface) : iface_(iface) {}
  virtual ~RPCproxyIfSingletonFactory() {}

  virtual RPCproxyIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(RPCproxyIf* /* handler */) {}

 protected:
  boost::shared_ptr<RPCproxyIf> iface_;
};

class RPCproxyNull : virtual public RPCproxyIf {
 public:
  virtual ~RPCproxyNull() {}
  void ping() {
    return;
  }
  void getURL(std::string& /* _return */, const std::string& /* url */) {
    return;
  }
  void getCacheStats() {
    return;
  }
};


class RPCproxy_ping_args {
 public:

  RPCproxy_ping_args() {
  }

  virtual ~RPCproxy_ping_args() throw() {}


  bool operator == (const RPCproxy_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RPCproxy_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPCproxy_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RPCproxy_ping_pargs {
 public:


  virtual ~RPCproxy_ping_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RPCproxy_ping_result {
 public:

  RPCproxy_ping_result() {
  }

  virtual ~RPCproxy_ping_result() throw() {}


  bool operator == (const RPCproxy_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RPCproxy_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPCproxy_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RPCproxy_ping_presult {
 public:


  virtual ~RPCproxy_ping_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RPCproxy_getURL_args__isset {
  _RPCproxy_getURL_args__isset() : url(false) {}
  bool url;
} _RPCproxy_getURL_args__isset;

class RPCproxy_getURL_args {
 public:

  RPCproxy_getURL_args() : url() {
  }

  virtual ~RPCproxy_getURL_args() throw() {}

  std::string url;

  _RPCproxy_getURL_args__isset __isset;

  void __set_url(const std::string& val) {
    url = val;
  }

  bool operator == (const RPCproxy_getURL_args & rhs) const
  {
    if (!(url == rhs.url))
      return false;
    return true;
  }
  bool operator != (const RPCproxy_getURL_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPCproxy_getURL_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RPCproxy_getURL_pargs {
 public:


  virtual ~RPCproxy_getURL_pargs() throw() {}

  const std::string* url;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RPCproxy_getURL_result__isset {
  _RPCproxy_getURL_result__isset() : success(false) {}
  bool success;
} _RPCproxy_getURL_result__isset;

class RPCproxy_getURL_result {
 public:

  RPCproxy_getURL_result() : success() {
  }

  virtual ~RPCproxy_getURL_result() throw() {}

  std::string success;

  _RPCproxy_getURL_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const RPCproxy_getURL_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RPCproxy_getURL_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPCproxy_getURL_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RPCproxy_getURL_presult__isset {
  _RPCproxy_getURL_presult__isset() : success(false) {}
  bool success;
} _RPCproxy_getURL_presult__isset;

class RPCproxy_getURL_presult {
 public:


  virtual ~RPCproxy_getURL_presult() throw() {}

  std::string* success;

  _RPCproxy_getURL_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class RPCproxy_getCacheStats_args {
 public:

  RPCproxy_getCacheStats_args() {
  }

  virtual ~RPCproxy_getCacheStats_args() throw() {}


  bool operator == (const RPCproxy_getCacheStats_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RPCproxy_getCacheStats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPCproxy_getCacheStats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RPCproxy_getCacheStats_pargs {
 public:


  virtual ~RPCproxy_getCacheStats_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RPCproxy_getCacheStats_result {
 public:

  RPCproxy_getCacheStats_result() {
  }

  virtual ~RPCproxy_getCacheStats_result() throw() {}


  bool operator == (const RPCproxy_getCacheStats_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RPCproxy_getCacheStats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RPCproxy_getCacheStats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RPCproxy_getCacheStats_presult {
 public:


  virtual ~RPCproxy_getCacheStats_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class RPCproxyClient : virtual public RPCproxyIf {
 public:
  RPCproxyClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  RPCproxyClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  void getURL(std::string& _return, const std::string& url);
  void send_getURL(const std::string& url);
  void recv_getURL(std::string& _return);
  void getCacheStats();
  void send_getCacheStats();
  void recv_getCacheStats();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RPCproxyProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<RPCproxyIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (RPCproxyProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getURL(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCacheStats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RPCproxyProcessor(boost::shared_ptr<RPCproxyIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &RPCproxyProcessor::process_ping;
    processMap_["getURL"] = &RPCproxyProcessor::process_getURL;
    processMap_["getCacheStats"] = &RPCproxyProcessor::process_getCacheStats;
  }

  virtual ~RPCproxyProcessor() {}
};

class RPCproxyProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RPCproxyProcessorFactory(const ::boost::shared_ptr< RPCproxyIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< RPCproxyIfFactory > handlerFactory_;
};

class RPCproxyMultiface : virtual public RPCproxyIf {
 public:
  RPCproxyMultiface(std::vector<boost::shared_ptr<RPCproxyIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RPCproxyMultiface() {}
 protected:
  std::vector<boost::shared_ptr<RPCproxyIf> > ifaces_;
  RPCproxyMultiface() {}
  void add(boost::shared_ptr<RPCproxyIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  void getURL(std::string& _return, const std::string& url) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getURL(_return, url);
    }
    ifaces_[i]->getURL(_return, url);
    return;
  }

  void getCacheStats() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCacheStats();
    }
    ifaces_[i]->getCacheStats();
  }

};

} // namespace

#endif
